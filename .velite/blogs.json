[
  {
    "title": "How JavaScript Works?",
    "slug": "001-how-javascript-works",
    "category": "JavaScript",
    "tags": [
      "JavaScript"
    ],
    "date": "27 February 2024",
    "lastUpdated": "27 February 2024",
    "description": "How does your JS code compile into machine code? Let's dive a little deeper to learn more about how JavaScript works.",
    "metadata": {
      "readingTime": 4,
      "wordCount": 935
    },
    "excerpt": "When you run your JS code, somehow it compile and got execute in your browser or server. How does your JS code compile into machine code? Let's dive a little deeper to learn more about how JavaScript works.\n\nA JS Engine is a piece of program which execute your",
    "content": "const{Fragment:e,jsx:n,jsxs:t}=arguments[0];function _createMdxContent(i){const o={br:\"br\",li:\"li\",ol:\"ol\",p:\"p\",section:\"section\",ul:\"ul\",...i.components},{Callout:l,Code:c,Heading:a,Image:r,Link:s,SubHeading:d}=o;return l||_missingMdxReference(\"Callout\",!0),c||_missingMdxReference(\"Code\",!0),a||_missingMdxReference(\"Heading\",!0),r||_missingMdxReference(\"Image\",!0),s||_missingMdxReference(\"Link\",!0),d||_missingMdxReference(\"SubHeading\",!0),t(e,{children:[n(o.p,{children:\"When you run your JS code, somehow it compile and got execute in your browser or server. How does your JS code compile into machine code? Let's dive a little deeper to learn more about how JavaScript works.\"}),\"\\n\",t(a,{id:\"js-engine\",title:\"What is JS Engine?\",children:[n(o.p,{children:\"A JS Engine is a piece of program which execute your JS code. So that means JS can execute not only on\\nbrowser but also on any piece of device which have JS Engine. Every browser have their own version of JS Engine. For Example...\"}),t(o.ul,{children:[\"\\n\",n(o.li,{children:\"V8 in Chrome, Opera, Edge and even Node\"}),\"\\n\",n(o.li,{children:\"Chakra in IE\"}),\"\\n\",n(o.li,{children:\"Spider Monkey in FireFox\"}),\"\\n\"]}),t(l,{children:[n(o.p,{children:\"Earlier JS was only limited to run on browser as a client slide language only.\\nWith Node JS, JS can also be used on server and to execute JS Node JS use V8\\nengine. In simple terms\"}),n(\"br\",{}),n(c,{children:\"Node JS = V8Engine + Node API/Modules\"})]}),n(r,{variant:\"half\",src:\"/_assets/js/001-01.png\",alt:\"JS Engine\",content:t(o.section,{children:[\"Any JS Engine contain two main components\",t(o.ul,{children:[n(o.li,{children:\"Call Stack: A call stack is where your code get executed inside Execution Context.\"}),n(o.li,{children:\"Heap: A heap is unstructured memory pool, which stores all the objects that your application needed.\"})]})]}),caption:\"[Fig 1.1] JS Engine\"}),t(d,{id:\"call-stack-and-execution-context\",title:\"Call stack & Execution Context\",children:[n(o.p,{children:\"An Execution context(EC) is where your JS code will get executed so all the necessary information about your code being run will be stored inside EC. Each EC have two phases\"}),t(o.ul,{children:[\"\\n\",n(o.li,{children:\"Creation Phase\"}),\"\\n\",n(o.li,{children:\"Execution Phase\"}),\"\\n\"]}),t(d,{id:\"creation-phase\",title:\"The Creation Phase\",children:[t(o.p,{children:[\"When the JS Engine execute your JS Code for the first time, before even executing you code it will create the \",n(c,{children:\"Global Execution Context\"}),\" which is default EC and contain top-level code.\\nDuring this Phase JS Engine will do following tasks\"]}),t(o.ul,{children:[\"\\n\",t(o.li,{children:[\"Create a \",n(c,{children:\"global\"}),\" object, window object in browser & global object in Node.\"]}),\"\\n\",t(o.li,{children:[\"Bind \",n(c,{children:\"this\"}),\" to global object\"]}),\"\\n\",n(o.li,{children:\"Creation of Scope Chain\"}),\"\\n\",n(o.li,{children:\"Store function declaration in memory and initialize the variables with undefined inside GEC.\"}),\"\\n\"]}),n(o.p,{children:\"So each Execution Context store\"}),t(o.ul,{children:[\"\\n\",t(o.li,{children:[\"A Variable Environment\",\"\\n\",t(o.ul,{children:[\"\\n\",n(o.li,{children:\"let, const, var declaration\"}),\"\\n\",n(o.li,{children:\"function and arguments\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",n(o.li,{children:\"A Scope Chain\"}),\"\\n\",n(o.li,{children:\"this keyword\"}),\"\\n\"]})]}),n(d,{id:\"execution-phase\",title:\"The Execution Phase\",children:t(o.p,{children:[\"During execution phase Engine will run JS code line by line and assign value to variables and executes the functions. For each function call, JS Engine will create new context push it into stack, known as call stack, for it knows as \",n(c,{children:\"Function Execution Context\"}),\". Unlike Global, Function EC represent the function local scope so it will only have local variables.\"]})})]}),n(\"br\",{})]}),\"\\n\",t(a,{id:\"v8-engine\",title:\"A brief intro of V8 Engine\",children:[n(r,{variant:\"half\",src:\"/_assets/js/001-02.png\",alt:\"V8 Engine\",content:t(o.p,{children:[\"The JS file enters the engine and the \",n(c,{children:\"parser\"}),\" parses the file, does lexical analysis break the code into a token which will be used in the creation of an \",n(c,{children:\"Abstract syntax tree\"}),\" (AST).\",n(o.br,{}),n(o.br,{}),\"Now generated AST will be passed down to \",n(c,{children:\"interpreter\"}),\" which generate the un-optimized code and execution can start with no delay. profiler will watch the code as it runs and identifies the area where it require the optimization. profiler will pass that code to \",n(c,{children:\"complier\"}),\" that perform optimization and generate optimized code that can replace its counterpart in non-optimized code generated by the interpreter.\",n(o.br,{}),n(o.br,{}),\"As the profiler and compiler constantly make changes to the bytecode, the JavaScript execution performance gradually improves.\"]}),caption:\"[Fig 1.2] V8 Engine\"}),n(l,{children:t(o.p,{children:[\"In V8 Engine, JS is interpreted by an interpreter called \",n(c,{children:\"Ignition\"}),\" as well as compiled by a JIT-optimized complier called \",n(c,{children:\"TurboFan\"})]})})]}),\"\\n\",t(a,{id:\"js-runtime\",title:\"What is JS Runtime?\",children:[n(o.p,{children:\"JS Engine run inside environment, which provide additional features to the scripts which we can use at the runtime.\"}),n(r,{variant:\"half\",src:\"/_assets/js/001-03.gif\",alt:\"JS Runtime\",content:t(o.ol,{children:[n(o.li,{children:\"JS scripts get access to WEB API which is not part of native JS for example DOM, AJAX, setTimeout etc.\"}),t(o.li,{children:[\"JS runtime also includes Event loop and Callback queue.\",t(o.ul,{children:[n(o.li,{children:\"When scripts start running, first all the sync code execution. All the callback associated with some event that callback function will be queued in the callback queue.\"}),n(o.li,{children:\"Now job of event loop is to the take the callback function which is ready to execute and if call stack is empty put the callbacks into the call stack for execution.\"})]})]})]}),caption:\"[Fig 1.3] JS Runtime\"}),t(d,{id:\"example\",title:\"Example\",children:[n(o.p,{children:\"Let's understand the working of JS Runtime via example.\"}),n(r,{variant:\"fill\",src:\"/_assets/js/001-04.gif\",alt:\"JS Runtime Example GIF\",caption:t(e,{children:[\"[Fig 1.4] JS Runtime Visualize via \",n(s,{href:\"http://latentflip.com/loupe/?code=Cgpjb25zb2xlLmxvZygiRmlyc3QgLT4gU3RhcnQiKQpmdW5jdGlvbiBydW4oKSB7CiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpewogICAgICAgIGNvbnNvbGUubG9nKCJUaGlyZCIpCiAgICB9LCAwKQogICAgY29uc29sZS5sb2coIlNlY29uZCIpCn0KcnVuKCkKY29uc29sZS5sb2coIkZvdXJ0aCAtPiBFbmQiKQ%3D%3D!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D\",children:\"loupe\"})]})}),t(o.ol,{children:[\"\\n\",n(o.li,{children:\"Once the code starts executing, first the console.log() function will be pushed onto the call stack. Once it's executed, it will be popped out of the stack.\"}),\"\\n\",t(o.li,{children:[\"Next, the run() function will be pushed onto the stack and execution will start. setTimeout(), provided by the WebAPI, delays tasks without blocking the main thread. So, the callback function passed to setTimeout will be handled by the WebAPI, and the timer will start running while the main thread continues executing and moves to the next console.log() for execution.\",\"\\n\",t(o.ul,{children:[\"\\n\",n(o.li,{children:\"In the example, the time being 0 doesn't mean it will be executed or added to the call stack after that time. What it means is that after x time, it will be added to the queue for further execution.\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\",n(o.li,{children:\"The run() function will be popped out of the stack, and the last console.log() will be pushed onto the stack for execution.\"}),\"\\n\",t(o.li,{children:[\"Now, your synchronous code execution is done, but what about the setTimeout callback? How will it get executed? That's where the event loop comes into the picture. The job of the event loop is to continue monitoring the call stack. Once it's empty, it takes tasks from the queue and puts them back into the call stack for execution.\",\"\\n\",t(o.ul,{children:[\"\\n\",n(o.li,{children:\"So, once the last console.log() execution is done and the call stack is empty, the event loop will take the callback from the queue and put it back into the call stack for execution.\"}),\"\\n\"]}),\"\\n\"]}),\"\\n\"]})]})]})]})}return{default:function(e={}){const{wrapper:t}=e.components||{};return t?n(t,{...e,children:n(_createMdxContent,{...e})}):_createMdxContent(e)}};function _missingMdxReference(e,n){throw new Error(\"Expected \"+(n?\"component\":\"object\")+\" `\"+e+\"` to be defined: you likely forgot to import, pass, or provide it.\")}",
    "permalink": "/javascript/001-how-javascript-works"
  }
]